// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/aeroratech/MAVCam-Proto/tree/main/protos/camera/camera.proto)

#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

#include "base/log.h"
#include "camera/camera.grpc.pb.h"
#include "plugins/camera/camera.h"

namespace mavcam {

class CameraServiceImpl final : public mavcam::rpc::camera::CameraService::Service {
public:
    CameraServiceImpl(std::shared_ptr<Camera> plugin) : _plugin(plugin) {}

    template <typename ResponseType>
    void fillResponseWithResult(ResponseType *response, mavcam::Camera::Result &result) const {
        auto rpc_result = translateToRpcResult(result);

        auto *rpc_camera_result = new mavcam::rpc::camera::CameraResult();
        rpc_camera_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_camera_result->set_result_str(ss.str());

        response->set_allocated_camera_result(rpc_camera_result);
    }

    static mavcam::rpc::camera::Mode translateToRpcMode(const mavcam::Camera::Mode &mode) {
        switch (mode) {
            default:
                base::LogError() << "Unknown mode enum value: " << static_cast<int>(mode);
            // FALLTHROUGH
            case mavcam::Camera::Mode::Unknown:
                return mavcam::rpc::camera::MODE_UNKNOWN;
            case mavcam::Camera::Mode::Photo:
                return mavcam::rpc::camera::MODE_PHOTO;
            case mavcam::Camera::Mode::Video:
                return mavcam::rpc::camera::MODE_VIDEO;
        }
    }

    static mavcam::Camera::Mode translateFromRpcMode(const mavcam::rpc::camera::Mode mode) {
        switch (mode) {
            default:
                base::LogError() << "Unknown mode enum value: " << static_cast<int>(mode);
            // FALLTHROUGH
            case mavcam::rpc::camera::MODE_UNKNOWN:
                return mavcam::Camera::Mode::Unknown;
            case mavcam::rpc::camera::MODE_PHOTO:
                return mavcam::Camera::Mode::Photo;
            case mavcam::rpc::camera::MODE_VIDEO:
                return mavcam::Camera::Mode::Video;
        }
    }

    static mavcam::rpc::camera::PhotosRange translateToRpcPhotosRange(
        const mavcam::Camera::PhotosRange &photos_range) {
        switch (photos_range) {
            default:
                base::LogError() << "Unknown photos_range enum value: "
                                 << static_cast<int>(photos_range);
            // FALLTHROUGH
            case mavcam::Camera::PhotosRange::All:
                return mavcam::rpc::camera::PHOTOS_RANGE_ALL;
            case mavcam::Camera::PhotosRange::SinceConnection:
                return mavcam::rpc::camera::PHOTOS_RANGE_SINCE_CONNECTION;
        }
    }

    static mavcam::Camera::PhotosRange translateFromRpcPhotosRange(
        const mavcam::rpc::camera::PhotosRange photos_range) {
        switch (photos_range) {
            default:
                base::LogError() << "Unknown photos_range enum value: "
                                 << static_cast<int>(photos_range);
            // FALLTHROUGH
            case mavcam::rpc::camera::PHOTOS_RANGE_ALL:
                return mavcam::Camera::PhotosRange::All;
            case mavcam::rpc::camera::PHOTOS_RANGE_SINCE_CONNECTION:
                return mavcam::Camera::PhotosRange::SinceConnection;
        }
    }

    static mavcam::rpc::camera::CameraResult::Result translateToRpcResult(
        const mavcam::Camera::Result &result) {
        switch (result) {
            default:
                base::LogError() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavcam::Camera::Result::Unknown:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_UNKNOWN;
            case mavcam::Camera::Result::Success:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_SUCCESS;
            case mavcam::Camera::Result::InProgress:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_IN_PROGRESS;
            case mavcam::Camera::Result::Busy:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_BUSY;
            case mavcam::Camera::Result::Denied:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_DENIED;
            case mavcam::Camera::Result::Error:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_ERROR;
            case mavcam::Camera::Result::Timeout:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_TIMEOUT;
            case mavcam::Camera::Result::WrongArgument:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_WRONG_ARGUMENT;
            case mavcam::Camera::Result::NoSystem:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_NO_SYSTEM;
            case mavcam::Camera::Result::ProtocolUnsupported:
                return mavcam::rpc::camera::CameraResult_Result_RESULT_PROTOCOL_UNSUPPORTED;
        }
    }

    static mavcam::Camera::Result translateFromRpcResult(
        const mavcam::rpc::camera::CameraResult::Result result) {
        switch (result) {
            default:
                base::LogError() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavcam::rpc::camera::CameraResult_Result_RESULT_UNKNOWN:
                return mavcam::Camera::Result::Unknown;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_SUCCESS:
                return mavcam::Camera::Result::Success;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_IN_PROGRESS:
                return mavcam::Camera::Result::InProgress;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_BUSY:
                return mavcam::Camera::Result::Busy;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_DENIED:
                return mavcam::Camera::Result::Denied;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_ERROR:
                return mavcam::Camera::Result::Error;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_TIMEOUT:
                return mavcam::Camera::Result::Timeout;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_WRONG_ARGUMENT:
                return mavcam::Camera::Result::WrongArgument;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_NO_SYSTEM:
                return mavcam::Camera::Result::NoSystem;
            case mavcam::rpc::camera::CameraResult_Result_RESULT_PROTOCOL_UNSUPPORTED:
                return mavcam::Camera::Result::ProtocolUnsupported;
        }
    }

    static std::unique_ptr<mavcam::rpc::camera::Position> translateToRpcPosition(
        const mavcam::Camera::Position &position) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Position>();

        rpc_obj->set_latitude_deg(position.latitude_deg);

        rpc_obj->set_longitude_deg(position.longitude_deg);

        rpc_obj->set_absolute_altitude_m(position.absolute_altitude_m);

        rpc_obj->set_relative_altitude_m(position.relative_altitude_m);

        return rpc_obj;
    }

    static mavcam::Camera::Position translateFromRpcPosition(
        const mavcam::rpc::camera::Position &position) {
        mavcam::Camera::Position obj;

        obj.latitude_deg = position.latitude_deg();

        obj.longitude_deg = position.longitude_deg();

        obj.absolute_altitude_m = position.absolute_altitude_m();

        obj.relative_altitude_m = position.relative_altitude_m();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::Quaternion> translateToRpcQuaternion(
        const mavcam::Camera::Quaternion &quaternion) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Quaternion>();

        rpc_obj->set_w(quaternion.w);

        rpc_obj->set_x(quaternion.x);

        rpc_obj->set_y(quaternion.y);

        rpc_obj->set_z(quaternion.z);

        return rpc_obj;
    }

    static mavcam::Camera::Quaternion translateFromRpcQuaternion(
        const mavcam::rpc::camera::Quaternion &quaternion) {
        mavcam::Camera::Quaternion obj;

        obj.w = quaternion.w();

        obj.x = quaternion.x();

        obj.y = quaternion.y();

        obj.z = quaternion.z();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::EulerAngle> translateToRpcEulerAngle(
        const mavcam::Camera::EulerAngle &euler_angle) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::EulerAngle>();

        rpc_obj->set_roll_deg(euler_angle.roll_deg);

        rpc_obj->set_pitch_deg(euler_angle.pitch_deg);

        rpc_obj->set_yaw_deg(euler_angle.yaw_deg);

        return rpc_obj;
    }

    static mavcam::Camera::EulerAngle translateFromRpcEulerAngle(
        const mavcam::rpc::camera::EulerAngle &euler_angle) {
        mavcam::Camera::EulerAngle obj;

        obj.roll_deg = euler_angle.roll_deg();

        obj.pitch_deg = euler_angle.pitch_deg();

        obj.yaw_deg = euler_angle.yaw_deg();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::CaptureInfo> translateToRpcCaptureInfo(
        const mavcam::Camera::CaptureInfo &capture_info) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::CaptureInfo>();

        rpc_obj->set_allocated_position(translateToRpcPosition(capture_info.position).release());

        rpc_obj->set_allocated_attitude_quaternion(
            translateToRpcQuaternion(capture_info.attitude_quaternion).release());

        rpc_obj->set_allocated_attitude_euler_angle(
            translateToRpcEulerAngle(capture_info.attitude_euler_angle).release());

        rpc_obj->set_time_utc_us(capture_info.time_utc_us);

        rpc_obj->set_is_success(capture_info.is_success);

        rpc_obj->set_index(capture_info.index);

        rpc_obj->set_file_url(capture_info.file_url);

        return rpc_obj;
    }

    static mavcam::Camera::CaptureInfo translateFromRpcCaptureInfo(
        const mavcam::rpc::camera::CaptureInfo &capture_info) {
        mavcam::Camera::CaptureInfo obj;

        obj.position = translateFromRpcPosition(capture_info.position());

        obj.attitude_quaternion = translateFromRpcQuaternion(capture_info.attitude_quaternion());

        obj.attitude_euler_angle = translateFromRpcEulerAngle(capture_info.attitude_euler_angle());

        obj.time_utc_us = capture_info.time_utc_us();

        obj.is_success = capture_info.is_success();

        obj.index = capture_info.index();

        obj.file_url = capture_info.file_url();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::VideoStreamSettings>
    translateToRpcVideoStreamSettings(
        const mavcam::Camera::VideoStreamSettings &video_stream_settings) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::VideoStreamSettings>();

        rpc_obj->set_frame_rate_hz(video_stream_settings.frame_rate_hz);

        rpc_obj->set_horizontal_resolution_pix(video_stream_settings.horizontal_resolution_pix);

        rpc_obj->set_vertical_resolution_pix(video_stream_settings.vertical_resolution_pix);

        rpc_obj->set_bit_rate_b_s(video_stream_settings.bit_rate_b_s);

        rpc_obj->set_rotation_deg(video_stream_settings.rotation_deg);

        rpc_obj->set_uri(video_stream_settings.uri);

        rpc_obj->set_horizontal_fov_deg(video_stream_settings.horizontal_fov_deg);

        return rpc_obj;
    }

    static mavcam::Camera::VideoStreamSettings translateFromRpcVideoStreamSettings(
        const mavcam::rpc::camera::VideoStreamSettings &video_stream_settings) {
        mavcam::Camera::VideoStreamSettings obj;

        obj.frame_rate_hz = video_stream_settings.frame_rate_hz();

        obj.horizontal_resolution_pix = video_stream_settings.horizontal_resolution_pix();

        obj.vertical_resolution_pix = video_stream_settings.vertical_resolution_pix();

        obj.bit_rate_b_s = video_stream_settings.bit_rate_b_s();

        obj.rotation_deg = video_stream_settings.rotation_deg();

        obj.uri = video_stream_settings.uri();

        obj.horizontal_fov_deg = video_stream_settings.horizontal_fov_deg();

        return obj;
    }

    static mavcam::rpc::camera::VideoStreamInfo::VideoStreamStatus translateToRpcVideoStreamStatus(
        const mavcam::Camera::VideoStreamInfo::VideoStreamStatus &video_stream_status) {
        switch (video_stream_status) {
            default:
                base::LogError() << "Unknown video_stream_status enum value: "
                                 << static_cast<int>(video_stream_status);
            // FALLTHROUGH
            case mavcam::Camera::VideoStreamInfo::VideoStreamStatus::NotRunning:
                return mavcam::rpc::camera::
                    VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_NOT_RUNNING;
            case mavcam::Camera::VideoStreamInfo::VideoStreamStatus::InProgress:
                return mavcam::rpc::camera::
                    VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_IN_PROGRESS;
        }
    }

    static mavcam::Camera::VideoStreamInfo::VideoStreamStatus translateFromRpcVideoStreamStatus(
        const mavcam::rpc::camera::VideoStreamInfo::VideoStreamStatus video_stream_status) {
        switch (video_stream_status) {
            default:
                base::LogError() << "Unknown video_stream_status enum value: "
                                 << static_cast<int>(video_stream_status);
            // FALLTHROUGH
            case mavcam::rpc::camera::
                VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_NOT_RUNNING:
                return mavcam::Camera::VideoStreamInfo::VideoStreamStatus::NotRunning;
            case mavcam::rpc::camera::
                VideoStreamInfo_VideoStreamStatus_VIDEO_STREAM_STATUS_IN_PROGRESS:
                return mavcam::Camera::VideoStreamInfo::VideoStreamStatus::InProgress;
        }
    }

    static mavcam::rpc::camera::VideoStreamInfo::VideoStreamSpectrum
    translateToRpcVideoStreamSpectrum(
        const mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum &video_stream_spectrum) {
        switch (video_stream_spectrum) {
            default:
                base::LogError() << "Unknown video_stream_spectrum enum value: "
                                 << static_cast<int>(video_stream_spectrum);
            // FALLTHROUGH
            case mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::Unknown:
                return mavcam::rpc::camera::
                    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_UNKNOWN;
            case mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::VisibleLight:
                return mavcam::rpc::camera::
                    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT;
            case mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::Infrared:
                return mavcam::rpc::camera::
                    VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_INFRARED;
        }
    }

    static mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum translateFromRpcVideoStreamSpectrum(
        const mavcam::rpc::camera::VideoStreamInfo::VideoStreamSpectrum video_stream_spectrum) {
        switch (video_stream_spectrum) {
            default:
                base::LogError() << "Unknown video_stream_spectrum enum value: "
                                 << static_cast<int>(video_stream_spectrum);
            // FALLTHROUGH
            case mavcam::rpc::camera::
                VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_UNKNOWN:
                return mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::Unknown;
            case mavcam::rpc::camera::
                VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT:
                return mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::VisibleLight;
            case mavcam::rpc::camera::
                VideoStreamInfo_VideoStreamSpectrum_VIDEO_STREAM_SPECTRUM_INFRARED:
                return mavcam::Camera::VideoStreamInfo::VideoStreamSpectrum::Infrared;
        }
    }

    static std::unique_ptr<mavcam::rpc::camera::VideoStreamInfo> translateToRpcVideoStreamInfo(
        const mavcam::Camera::VideoStreamInfo &video_stream_info) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::VideoStreamInfo>();

        rpc_obj->set_stream_id(video_stream_info.stream_id);

        rpc_obj->set_allocated_settings(
            translateToRpcVideoStreamSettings(video_stream_info.settings).release());

        rpc_obj->set_status(translateToRpcVideoStreamStatus(video_stream_info.status));

        rpc_obj->set_spectrum(translateToRpcVideoStreamSpectrum(video_stream_info.spectrum));

        return rpc_obj;
    }

    static mavcam::Camera::VideoStreamInfo translateFromRpcVideoStreamInfo(
        const mavcam::rpc::camera::VideoStreamInfo &video_stream_info) {
        mavcam::Camera::VideoStreamInfo obj;

        obj.stream_id = video_stream_info.stream_id();

        obj.settings = translateFromRpcVideoStreamSettings(video_stream_info.settings());

        obj.status = translateFromRpcVideoStreamStatus(video_stream_info.status());

        obj.spectrum = translateFromRpcVideoStreamSpectrum(video_stream_info.spectrum());

        return obj;
    }

    static mavcam::rpc::camera::Status::StorageStatus translateToRpcStorageStatus(
        const mavcam::Camera::Status::StorageStatus &storage_status) {
        switch (storage_status) {
            default:
                base::LogError() << "Unknown storage_status enum value: "
                                 << static_cast<int>(storage_status);
            // FALLTHROUGH
            case mavcam::Camera::Status::StorageStatus::NotAvailable:
                return mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE;
            case mavcam::Camera::Status::StorageStatus::Unformatted:
                return mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_UNFORMATTED;
            case mavcam::Camera::Status::StorageStatus::Formatted:
                return mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_FORMATTED;
            case mavcam::Camera::Status::StorageStatus::NotSupported:
                return mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED;
        }
    }

    static mavcam::Camera::Status::StorageStatus translateFromRpcStorageStatus(
        const mavcam::rpc::camera::Status::StorageStatus storage_status) {
        switch (storage_status) {
            default:
                base::LogError() << "Unknown storage_status enum value: "
                                 << static_cast<int>(storage_status);
            // FALLTHROUGH
            case mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_NOT_AVAILABLE:
                return mavcam::Camera::Status::StorageStatus::NotAvailable;
            case mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_UNFORMATTED:
                return mavcam::Camera::Status::StorageStatus::Unformatted;
            case mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_FORMATTED:
                return mavcam::Camera::Status::StorageStatus::Formatted;
            case mavcam::rpc::camera::Status_StorageStatus_STORAGE_STATUS_NOT_SUPPORTED:
                return mavcam::Camera::Status::StorageStatus::NotSupported;
        }
    }

    static mavcam::rpc::camera::Status::StorageType translateToRpcStorageType(
        const mavcam::Camera::Status::StorageType &storage_type) {
        switch (storage_type) {
            default:
                base::LogError() << "Unknown storage_type enum value: "
                                 << static_cast<int>(storage_type);
            // FALLTHROUGH
            case mavcam::Camera::Status::StorageType::Unknown:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_UNKNOWN;
            case mavcam::Camera::Status::StorageType::UsbStick:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_USB_STICK;
            case mavcam::Camera::Status::StorageType::Sd:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_SD;
            case mavcam::Camera::Status::StorageType::Microsd:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_MICROSD;
            case mavcam::Camera::Status::StorageType::Hd:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_HD;
            case mavcam::Camera::Status::StorageType::Other:
                return mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_OTHER;
        }
    }

    static mavcam::Camera::Status::StorageType translateFromRpcStorageType(
        const mavcam::rpc::camera::Status::StorageType storage_type) {
        switch (storage_type) {
            default:
                base::LogError() << "Unknown storage_type enum value: "
                                 << static_cast<int>(storage_type);
            // FALLTHROUGH
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_UNKNOWN:
                return mavcam::Camera::Status::StorageType::Unknown;
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_USB_STICK:
                return mavcam::Camera::Status::StorageType::UsbStick;
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_SD:
                return mavcam::Camera::Status::StorageType::Sd;
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_MICROSD:
                return mavcam::Camera::Status::StorageType::Microsd;
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_HD:
                return mavcam::Camera::Status::StorageType::Hd;
            case mavcam::rpc::camera::Status_StorageType_STORAGE_TYPE_OTHER:
                return mavcam::Camera::Status::StorageType::Other;
        }
    }

    static std::unique_ptr<mavcam::rpc::camera::Status> translateToRpcStatus(
        const mavcam::Camera::Status &status) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Status>();

        rpc_obj->set_video_on(status.video_on);

        rpc_obj->set_photo_interval_on(status.photo_interval_on);

        rpc_obj->set_used_storage_mib(status.used_storage_mib);

        rpc_obj->set_available_storage_mib(status.available_storage_mib);

        rpc_obj->set_total_storage_mib(status.total_storage_mib);

        rpc_obj->set_recording_time_s(status.recording_time_s);

        rpc_obj->set_media_folder_name(status.media_folder_name);

        rpc_obj->set_storage_status(translateToRpcStorageStatus(status.storage_status));

        rpc_obj->set_storage_id(status.storage_id);

        rpc_obj->set_storage_type(translateToRpcStorageType(status.storage_type));

        return rpc_obj;
    }

    static mavcam::Camera::Status translateFromRpcStatus(
        const mavcam::rpc::camera::Status &status) {
        mavcam::Camera::Status obj;

        obj.video_on = status.video_on();

        obj.photo_interval_on = status.photo_interval_on();

        obj.used_storage_mib = status.used_storage_mib();

        obj.available_storage_mib = status.available_storage_mib();

        obj.total_storage_mib = status.total_storage_mib();

        obj.recording_time_s = status.recording_time_s();

        obj.media_folder_name = status.media_folder_name();

        obj.storage_status = translateFromRpcStorageStatus(status.storage_status());

        obj.storage_id = status.storage_id();

        obj.storage_type = translateFromRpcStorageType(status.storage_type());

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::Option> translateToRpcOption(
        const mavcam::Camera::Option &option) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Option>();

        rpc_obj->set_option_id(option.option_id);

        rpc_obj->set_option_description(option.option_description);

        return rpc_obj;
    }

    static mavcam::Camera::Option translateFromRpcOption(
        const mavcam::rpc::camera::Option &option) {
        mavcam::Camera::Option obj;

        obj.option_id = option.option_id();

        obj.option_description = option.option_description();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::Setting> translateToRpcSetting(
        const mavcam::Camera::Setting &setting) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Setting>();

        rpc_obj->set_setting_id(setting.setting_id);

        rpc_obj->set_setting_description(setting.setting_description);

        rpc_obj->set_allocated_option(translateToRpcOption(setting.option).release());

        rpc_obj->set_is_range(setting.is_range);

        return rpc_obj;
    }

    static mavcam::Camera::Setting translateFromRpcSetting(
        const mavcam::rpc::camera::Setting &setting) {
        mavcam::Camera::Setting obj;

        obj.setting_id = setting.setting_id();

        obj.setting_description = setting.setting_description();

        obj.option = translateFromRpcOption(setting.option());

        obj.is_range = setting.is_range();

        return obj;
    }

    static std::unique_ptr<mavcam::rpc::camera::SettingOptions> translateToRpcSettingOptions(
        const mavcam::Camera::SettingOptions &setting_options) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::SettingOptions>();

        rpc_obj->set_setting_id(setting_options.setting_id);

        rpc_obj->set_setting_description(setting_options.setting_description);

        for (const auto &elem : setting_options.options) {
            auto *ptr = rpc_obj->add_options();
            ptr->CopyFrom(*translateToRpcOption(elem).release());
        }

        rpc_obj->set_is_range(setting_options.is_range);

        return rpc_obj;
    }

    static mavcam::Camera::SettingOptions translateFromRpcSettingOptions(
        const mavcam::rpc::camera::SettingOptions &setting_options) {
        mavcam::Camera::SettingOptions obj;

        obj.setting_id = setting_options.setting_id();

        obj.setting_description = setting_options.setting_description();

        for (const auto &elem : setting_options.options()) {
            obj.options.push_back(
                translateFromRpcOption(static_cast<mavcam::rpc::camera::Option>(elem)));
        }

        obj.is_range = setting_options.is_range();

        return obj;
    }

    static mavcam::rpc::camera::Information::CameraCapFlags translateToRpcCameraCapFlags(
        const mavcam::Camera::Information::CameraCapFlags &camera_cap_flags) {
        switch (camera_cap_flags) {
            default:
                base::LogError() << "Unknown camera_cap_flags enum value: "
                                 << static_cast<int>(camera_cap_flags);
            // FALLTHROUGH
            case mavcam::Camera::Information::CameraCapFlags::CaptureVideo:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAPTURE_VIDEO;
            case mavcam::Camera::Information::CameraCapFlags::CaptureImage:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAPTURE_IMAGE;
            case mavcam::Camera::Information::CameraCapFlags::HasModes:
                return mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_MODES;
            case mavcam::Camera::Information::CameraCapFlags::CanCaptureImageInVideoMode:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE;
            case mavcam::Camera::Information::CameraCapFlags::CanCaptureVideoInImageMode:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE;
            case mavcam::Camera::Information::CameraCapFlags::HasImageSurveyMode:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE;
            case mavcam::Camera::Information::CameraCapFlags::HasBasicZoom:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM;
            case mavcam::Camera::Information::CameraCapFlags::HasBasicFocus:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS;
            case mavcam::Camera::Information::CameraCapFlags::HasVideoStream:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM;
            case mavcam::Camera::Information::CameraCapFlags::HasTrackingPoint:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_POINT;
            case mavcam::Camera::Information::CameraCapFlags::HasTrackingRectangle:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE;
            case mavcam::Camera::Information::CameraCapFlags::HasTrackingGeoStatus:
                return mavcam::rpc::camera::
                    Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS;
        }
    }

    static mavcam::Camera::Information::CameraCapFlags translateFromRpcCameraCapFlags(
        const mavcam::rpc::camera::Information::CameraCapFlags camera_cap_flags) {
        switch (camera_cap_flags) {
            default:
                base::LogError() << "Unknown camera_cap_flags enum value: "
                                 << static_cast<int>(camera_cap_flags);
            // FALLTHROUGH
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAPTURE_VIDEO:
                return mavcam::Camera::Information::CameraCapFlags::CaptureVideo;
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAPTURE_IMAGE:
                return mavcam::Camera::Information::CameraCapFlags::CaptureImage;
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_MODES:
                return mavcam::Camera::Information::CameraCapFlags::HasModes;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE:
                return mavcam::Camera::Information::CameraCapFlags::CanCaptureImageInVideoMode;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE:
                return mavcam::Camera::Information::CameraCapFlags::CanCaptureVideoInImageMode;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE:
                return mavcam::Camera::Information::CameraCapFlags::HasImageSurveyMode;
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM:
                return mavcam::Camera::Information::CameraCapFlags::HasBasicZoom;
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS:
                return mavcam::Camera::Information::CameraCapFlags::HasBasicFocus;
            case mavcam::rpc::camera::Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM:
                return mavcam::Camera::Information::CameraCapFlags::HasVideoStream;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_POINT:
                return mavcam::Camera::Information::CameraCapFlags::HasTrackingPoint;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE:
                return mavcam::Camera::Information::CameraCapFlags::HasTrackingRectangle;
            case mavcam::rpc::camera::
                Information_CameraCapFlags_CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS:
                return mavcam::Camera::Information::CameraCapFlags::HasTrackingGeoStatus;
        }
    }

    static std::unique_ptr<mavcam::rpc::camera::Information> translateToRpcInformation(
        const mavcam::Camera::Information &information) {
        auto rpc_obj = std::make_unique<mavcam::rpc::camera::Information>();

        rpc_obj->set_vendor_name(information.vendor_name);

        rpc_obj->set_model_name(information.model_name);

        rpc_obj->set_firmware_version(information.firmware_version);

        rpc_obj->set_focal_length_mm(information.focal_length_mm);

        rpc_obj->set_horizontal_sensor_size_mm(information.horizontal_sensor_size_mm);

        rpc_obj->set_vertical_sensor_size_mm(information.vertical_sensor_size_mm);

        rpc_obj->set_horizontal_resolution_px(information.horizontal_resolution_px);

        rpc_obj->set_vertical_resolution_px(information.vertical_resolution_px);

        rpc_obj->set_lens_id(information.lens_id);

        rpc_obj->set_definition_file_version(information.definition_file_version);

        rpc_obj->set_definition_file_uri(information.definition_file_uri);

        for (const auto &elem : information.camera_cap_flags) {
            rpc_obj->add_camera_cap_flags(translateToRpcCameraCapFlags(elem));
        }

        return rpc_obj;
    }

    static mavcam::Camera::Information translateFromRpcInformation(
        const mavcam::rpc::camera::Information &information) {
        mavcam::Camera::Information obj;

        obj.vendor_name = information.vendor_name();

        obj.model_name = information.model_name();

        obj.firmware_version = information.firmware_version();

        obj.focal_length_mm = information.focal_length_mm();

        obj.horizontal_sensor_size_mm = information.horizontal_sensor_size_mm();

        obj.vertical_sensor_size_mm = information.vertical_sensor_size_mm();

        obj.horizontal_resolution_px = information.horizontal_resolution_px();

        obj.vertical_resolution_px = information.vertical_resolution_px();

        obj.lens_id = information.lens_id();

        obj.definition_file_version = information.definition_file_version();

        obj.definition_file_uri = information.definition_file_uri();

        for (const auto &elem : information.camera_cap_flags()) {
            obj.camera_cap_flags.push_back(translateFromRpcCameraCapFlags(
                static_cast<mavcam::rpc::camera::Information::CameraCapFlags>(elem)));
        }

        return obj;
    }

    grpc::Status Prepare(grpc::ServerContext * /* context */,
                         const mavcam::rpc::camera::PrepareRequest * /* request */,
                         mavcam::rpc::camera::PrepareResponse *response) override {
        auto result = _plugin->prepare();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status TakePhoto(grpc::ServerContext * /* context */,
                           const mavcam::rpc::camera::TakePhotoRequest * /* request */,
                           mavcam::rpc::camera::TakePhotoResponse *response) override {
        auto result = _plugin->take_photo();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StartPhotoInterval(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::StartPhotoIntervalRequest *request,
        mavcam::rpc::camera::StartPhotoIntervalResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "StartPhotoInterval sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->start_photo_interval(request->interval_s());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StopPhotoInterval(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::StopPhotoIntervalRequest * /* request */,
        mavcam::rpc::camera::StopPhotoIntervalResponse *response) override {
        auto result = _plugin->stop_photo_interval();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StartVideo(grpc::ServerContext * /* context */,
                            const mavcam::rpc::camera::StartVideoRequest * /* request */,
                            mavcam::rpc::camera::StartVideoResponse *response) override {
        auto result = _plugin->start_video();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StopVideo(grpc::ServerContext * /* context */,
                           const mavcam::rpc::camera::StopVideoRequest * /* request */,
                           mavcam::rpc::camera::StopVideoResponse *response) override {
        auto result = _plugin->stop_video();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StartVideoStreaming(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::StartVideoStreamingRequest *request,
        mavcam::rpc::camera::StartVideoStreamingResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "StartVideoStreaming sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->start_video_streaming(request->stream_id());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status StopVideoStreaming(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::StopVideoStreamingRequest *request,
        mavcam::rpc::camera::StopVideoStreamingResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "StopVideoStreaming sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->stop_video_streaming(request->stream_id());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status SetMode(grpc::ServerContext * /* context */,
                         const mavcam::rpc::camera::SetModeRequest *request,
                         mavcam::rpc::camera::SetModeResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "SetMode sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->set_mode(translateFromRpcMode(request->mode()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status ListPhotos(grpc::ServerContext * /* context */,
                            const mavcam::rpc::camera::ListPhotosRequest *request,
                            mavcam::rpc::camera::ListPhotosResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "ListPhotos sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->list_photos(translateFromRpcPhotosRange(request->photos_range()));

        if (response != nullptr) {
            fillResponseWithResult(response, result.first);

            for (auto elem : result.second) {
                auto *ptr = response->add_capture_infos();
                ptr->CopyFrom(*translateToRpcCaptureInfo(elem).release());
            }
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeMode(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeModeRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::ModeResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->mode_async(
            [this, &writer, &stream_closed_promise](const mavcam::Camera::Mode mode) {
                mavcam::rpc::camera::ModeResponse rpc_response;

                rpc_response.set_mode(translateToRpcMode(mode));

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribeInformation(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeInformationRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::InformationResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->information_async(
            [this, &writer, &stream_closed_promise](const mavcam::Camera::Information information) {
                mavcam::rpc::camera::InformationResponse rpc_response;

                rpc_response.set_allocated_information(
                    translateToRpcInformation(information).release());

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribeVideoStreamInfo(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeVideoStreamInfoRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::VideoStreamInfoResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->video_stream_info_async(
            [this, &writer, &stream_closed_promise](
                const std::vector<mavcam::Camera::VideoStreamInfo> video_stream_info) {
                mavcam::rpc::camera::VideoStreamInfoResponse rpc_response;

                for (const auto &elem : video_stream_info) {
                    auto *ptr = rpc_response.add_video_stream_infos();
                    ptr->CopyFrom(*translateToRpcVideoStreamInfo(elem).release());
                }

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribeCaptureInfo(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeCaptureInfoRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::CaptureInfoResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->capture_info_async([this, &writer, &stream_closed_promise](
                                        const mavcam::Camera::CaptureInfo capture_info) {
            mavcam::rpc::camera::CaptureInfoResponse rpc_response;

            rpc_response.set_allocated_capture_info(
                translateToRpcCaptureInfo(capture_info).release());

            writer->Write(rpc_response);
            unregister_stream_stop_promise(stream_closed_promise);
            stream_closed_promise->set_value();
        });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribeStatus(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeStatusRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::StatusResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->status_async(
            [this, &writer, &stream_closed_promise](const mavcam::Camera::Status status) {
                mavcam::rpc::camera::StatusResponse rpc_response;

                rpc_response.set_allocated_camera_status(translateToRpcStatus(status).release());

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribeCurrentSettings(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribeCurrentSettingsRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::CurrentSettingsResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->current_settings_async(
            [this, &writer,
             &stream_closed_promise](const std::vector<mavcam::Camera::Setting> current_settings) {
                mavcam::rpc::camera::CurrentSettingsResponse rpc_response;

                for (const auto &elem : current_settings) {
                    auto *ptr = rpc_response.add_current_settings();
                    ptr->CopyFrom(*translateToRpcSetting(elem).release());
                }

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SubscribePossibleSettingOptions(
        grpc::ServerContext * /* context */,
        const mavcam::rpc::camera::SubscribePossibleSettingOptionsRequest * /* request */,
        grpc::ServerWriter<mavcam::rpc::camera::PossibleSettingOptionsResponse> *writer) override {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        _plugin->possible_setting_options_async(
            [this, &writer, &stream_closed_promise](
                const std::vector<mavcam::Camera::SettingOptions> possible_setting_options) {
                mavcam::rpc::camera::PossibleSettingOptionsResponse rpc_response;

                for (const auto &elem : possible_setting_options) {
                    auto *ptr = rpc_response.add_setting_options();
                    ptr->CopyFrom(*translateToRpcSettingOptions(elem).release());
                }

                writer->Write(rpc_response);
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            });

        stream_closed_future.wait();

        return ::grpc::Status::OK;
    }

    grpc::Status SetSetting(grpc::ServerContext * /* context */,
                            const mavcam::rpc::camera::SetSettingRequest *request,
                            mavcam::rpc::camera::SetSettingResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "SetSetting sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->set_setting(translateFromRpcSetting(request->setting()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status GetSetting(grpc::ServerContext * /* context */,
                            const mavcam::rpc::camera::GetSettingRequest *request,
                            mavcam::rpc::camera::GetSettingResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "GetSetting sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->get_setting(translateFromRpcSetting(request->setting()));

        if (response != nullptr) {
            fillResponseWithResult(response, result.first);

            response->set_allocated_setting(translateToRpcSetting(result.second).release());
        }

        return grpc::Status::OK;
    }

    grpc::Status FormatStorage(grpc::ServerContext * /* context */,
                               const mavcam::rpc::camera::FormatStorageRequest *request,
                               mavcam::rpc::camera::FormatStorageResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "FormatStorage sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->format_storage(request->storage_id());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status SelectCamera(grpc::ServerContext * /* context */,
                              const mavcam::rpc::camera::SelectCameraRequest *request,
                              mavcam::rpc::camera::SelectCameraResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "SelectCamera sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->select_camera(request->camera_id());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status ResetSettings(grpc::ServerContext * /* context */,
                               const mavcam::rpc::camera::ResetSettingsRequest * /* request */,
                               mavcam::rpc::camera::ResetSettingsResponse *response) override {
        auto result = _plugin->reset_settings();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status SetTimestamp(grpc::ServerContext * /* context */,
                              const mavcam::rpc::camera::SetTimestampRequest *request,
                              mavcam::rpc::camera::SetTimestampResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "SetTimestamp sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->set_timestamp(request->timestamp());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    grpc::Status SetZoomRange(grpc::ServerContext * /* context */,
                              const mavcam::rpc::camera::SetZoomRangeRequest *request,
                              mavcam::rpc::camera::SetZoomRangeResponse *response) override {
        if (request == nullptr) {
            base::LogWarn() << "SetZoomRange sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _plugin->set_zoom_range(request->range());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return ::grpc::Status::OK;
    }

    void stop() {
        _stopped.store(true);
        for (auto &prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }
private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom) {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom) {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }
private:
    std::shared_ptr<Camera> _plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

}  // namespace mavcam